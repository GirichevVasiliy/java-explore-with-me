{
	"info": {
		"_postman_id": "575bf3eb-42c5-4f48-b0c2-756208acb7d5",
		"name": "Comments GIT-2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23942420"
	},
	"item": [
		{
			"name": "Commets admin",
			"item": [
				{
					"name": "Comment 1 -Добавление коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент1\",\r\n  \"userId\": 1,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление коммента User не найден 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент1\",\r\n  \"userId\": 1000,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление коммента Event не найден 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент1\",\r\n  \"userId\": 2,\r\n  \"eventId\": 100000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment 1 - Обновление коммента admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"КомментAdmin\",\r\n  \"userId\": 1,\r\n  \"eventId\": 1,\r\n  \"commentStateDto\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 2 -  Коммент 2 принадлежит событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент2\",\r\n  \"userId\": 2,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление коммента admin 409 не принадлежит событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"КомментAdmin2\",\r\n  \"userId\": 2,\r\n  \"eventId\": 3,\r\n  \"commentStateDto\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление коммента 2 admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"КомментAdmin2UPDATE\",\r\n  \"userId\": 2,\r\n  \"eventId\": 1,\r\n  \"commentStateDto\": null\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск коммента по id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Соотвествие id\", function () {\r",
									"    pm.expect(target.id).to.eql(1);\r",
									"});\r",
									"pm.test(\"Соотвествие text\", function () {\r",
									"    pm.expect(target.text).to.eql(\"КомментAdmin\");\r",
									"});\r",
									"pm.test(\"Соотвествие author.id\", function () {\r",
									"    pm.expect(target.author.id).to.eql(1);\r",
									"});\r",
									"pm.test(\"Соотвествие event.id\", function () {\r",
									"    pm.expect(target.event.id).to.eql(1);\r",
									"});\r",
									"pm.test(\"Соотвествие state\", function () {\r",
									"    pm.expect(target.state).to.eql(\"PUBLISHED\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 3 - Коммент 3 принадлежит событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент3\",\r\n  \"userId\": 3,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск всех комментов у события  1 по его id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list comments response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 3').to.eql(3);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/event/:eventId?from=0&size=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить коммент 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка после удаления коммента 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка после удаления коммента 3 в коллекции",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list comments response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/event/:eventId?from=0&size=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Commets Private",
			"item": [
				{
					"name": "Comment  -Добавление коммента с ненормативной лексикой",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"МаТ\",\r\n  \"userId\": 5,\r\n  \"eventId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment  4 - Добавление коммента",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент4\",\r\n  \"userId\": 5,\r\n  \"eventId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление коммента User не найден 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент4\",\r\n  \"userId\": 1000,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление коммента Event не найден 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент4\",\r\n  \"userId\": 2,\r\n  \"eventId\": 100000\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment 1 - Обновление коммента admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент4Admin\",\r\n  \"userId\": 5,\r\n  \"eventId\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 5 -  Коммент 5 принадлежит событию 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент5\",\r\n  \"userId\": 6,\r\n  \"eventId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление коммента 409 не принадлежит событию",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент 5 Обновление\",\r\n  \"userId\": 6,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление коммента 409 не принадлежит пользователю",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент 5 Обновление\",\r\n  \"userId\": 1,\r\n  \"eventId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Обновление коммента 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент 5 Обновление!!\",\r\n  \"userId\": 6,\r\n  \"eventId\": 4\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск коммента по id не принадлежит пользователю",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск коммента по id владелец",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Соотвествие id\", function () {\r",
									"    pm.expect(target.id).to.eql(5);\r",
									"});\r",
									"pm.test(\"Соотвествие text\", function () {\r",
									"    pm.expect(target.text).to.eql(\"Коммент 5 Обновление!!\");\r",
									"});\r",
									"pm.test(\"Соотвествие author.id\", function () {\r",
									"    pm.expect(target.author.id).to.eql(6);\r",
									"});\r",
									"pm.test(\"Соотвествие event.id\", function () {\r",
									"    pm.expect(target.event.id).to.eql(4);\r",
									"});\r",
									"pm.test(\"Соотвествие state\", function () {\r",
									"    pm.expect(target.state).to.eql(\"UPDATE\");\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								},
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск всех комментов у события  1 по его id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list comments response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/comments/event/:eventId/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								"event",
								":eventId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить коммент 5 не владелец",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								},
								{
									"key": "userId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удалить коммент 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								},
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Проверка после удаления коммента 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/private/comments/:commentId/user/:userId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments",
								":commentId",
								"user",
								":userId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "5"
								},
								{
									"key": "userId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments Public",
			"item": [
				{
					"name": "Поиск всех комментов у события  1 по его id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/event/:eventId?from=0&size=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "3000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск всех комментов у события  1 по его id Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list comments response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 2').to.eql(2);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/event/:eventId?from=0&size=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment 6 -  Коммент 6 принадлежит событию 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Коммент6\",\r\n  \"userId\": 1,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/private/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"private",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment 1 - Обновление коммента admin Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"КомментAdmin\",\r\n  \"userId\": 1,\r\n  \"eventId\": 1,\r\n  \"commentStateDto\": \"CANCELED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Comment 1 - Обновление коммента admin Copy 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(200);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, createdOn, author, event, state\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('createdOn');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('event');\r",
									"pm.expect(target).to.have.property('state');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Название события должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"КомментAdmin\",\r\n  \"userId\": 2,\r\n  \"eventId\": 1,\r\n  \"commentStateDto\": \"CANCELED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск всех комментов у события  1 по его id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.be.ok;\r",
									"});\r",
									"pm.test(\"Test list comments response\", function () {\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.length, 'List length must be 1').to.eql(1);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/comments/event/:eventId?from=0&size=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Error",
			"item": [
				{
					"name": "Comment символов более 7000",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.\",\r\n  \"userId\": 1,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment \"userId\": null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Incidunt eveniet ratione sint aspernatur.\",\r\n  \"userId\": null,\r\n  \"eventId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment  \"eventId\": null",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Incidunt eveniet ratione sint aspernatur.\",\r\n  \"userId\": 1,\r\n  \"eventId\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments"
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment символов более 7000  update",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.Sed blanditiis quas beatae qui quia quia natus et sed. Expedita ut vitae error possimus cupiditate et quae natus. Dolorem unde neque deserunt in assumenda omnis. Sed ab occaecati quae fuga. Incidunt eveniet ratione sint aspernatur.\",\r\n  \"userId\": 1,\r\n  \"eventId\": 1,\r\n  \"commentStateDto\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment \"userId\": null Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Incidunt eveniet ratione sint aspernatur.\",\r\n  \"userId\": null,\r\n  \"eventId\": 1,\r\n  \"commentStateDto\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Comment  \"eventId\": null Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.clientError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"text\": \"Incidunt eveniet ratione sint aspernatur.\",\r\n  \"userId\": 1,\r\n  \"eventId\": null,\r\n  \"commentStateDto\": \"PUBLISHED\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/admin/comments/:commentId",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск всех комментов у события  1 по его id -1/100",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 500 и данные в формате json\", function () {\r",
									"    pm.response.to.be.serverError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/event/:eventId?from=-1&size=100",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "-1"
								},
								{
									"key": "size",
									"value": "100"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Поиск всех комментов у события  1 по его id 0/-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 500 и данные в формате json\", function () {\r",
									"    pm.response.to.be.serverError;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Ошибка должна содержать поля: status\", function () {\r",
									"    pm.expect(target).to.have.property('status');\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8080/admin/comments/event/:eventId?from=0&size=-10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"admin",
								"comments",
								"event",
								":eventId"
							],
							"query": [
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "-10"
								}
							],
							"variable": [
								{
									"key": "eventId",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "uid",
			"value": "54"
		}
	]
}